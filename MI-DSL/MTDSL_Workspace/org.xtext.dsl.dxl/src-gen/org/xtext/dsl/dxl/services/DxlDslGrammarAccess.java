/*
* generated by Xtext
*/
package org.xtext.dsl.dxl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DxlDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFoldersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFoldersFolderParserRuleCall_3_0 = (RuleCall)cFoldersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	"model" name=ID "{" folders+=Folder* "}";
		public ParserRule getRule() { return rule; }

		//"model" name=ID "{" folders+=Folder* "}"
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//folders+=Folder*
		public Assignment getFoldersAssignment_3() { return cFoldersAssignment_3; }

		//Folder
		public RuleCall getFoldersFolderParserRuleCall_3_0() { return cFoldersFolderParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Folder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFolderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModuleModuleParserRuleCall_3_0 = (RuleCall)cModuleAssignment_3.eContents().get(0);
		private final Assignment cAssociationTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAssociationTypeAssociationTypeParserRuleCall_4_0 = (RuleCall)cAssociationTypeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Folder:
		//	"folder" name=ID "{" module+=Module* associationType+=AssociationType* // These are link modules
		//	"}";
		public ParserRule getRule() { return rule; }

		//"folder" name=ID "{" module+=Module* associationType+=AssociationType* // These are link modules
		//"}"
		public Group getGroup() { return cGroup; }

		//"folder"
		public Keyword getFolderKeyword_0() { return cFolderKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//module+=Module*
		public Assignment getModuleAssignment_3() { return cModuleAssignment_3; }

		//Module
		public RuleCall getModuleModuleParserRuleCall_3_0() { return cModuleModuleParserRuleCall_3_0; }

		//associationType+=AssociationType*
		public Assignment getAssociationTypeAssignment_4() { return cAssociationTypeAssignment_4; }

		//AssociationType
		public RuleCall getAssociationTypeAssociationTypeParserRuleCall_4_0() { return cAssociationTypeAssociationTypeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIgnoreInReportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIgnoreInReportIgnoreInReportKeyword_1_0 = (Keyword)cIgnoreInReportAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFileNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFileNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cFileNameAssignment_4_1.eContents().get(0);
		private final Assignment cClassesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassesClassParserRuleCall_5_0 = (RuleCall)cClassesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Module:
		//	"module" ignoreInReport?="ignoreInReport"? name=ID "{" //Option to declare a file name: default convention used 'Maps' for map, 'Devices' for 'device'
		//	("fileName" fileName=STRING)? classes+=Class* "}";
		public ParserRule getRule() { return rule; }

		//"module" ignoreInReport?="ignoreInReport"? name=ID "{" //Option to declare a file name: default convention used 'Maps' for map, 'Devices' for 'device'
		//("fileName" fileName=STRING)? classes+=Class* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//ignoreInReport?="ignoreInReport"?
		public Assignment getIgnoreInReportAssignment_1() { return cIgnoreInReportAssignment_1; }

		//"ignoreInReport"
		public Keyword getIgnoreInReportIgnoreInReportKeyword_1_0() { return cIgnoreInReportIgnoreInReportKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("fileName" fileName=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"fileName"
		public Keyword getFileNameKeyword_4_0() { return cFileNameKeyword_4_0; }

		//fileName=STRING
		public Assignment getFileNameAssignment_4_1() { return cFileNameAssignment_4_1; }

		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_4_1_0() { return cFileNameSTRINGTerminalRuleCall_4_1_0; }

		//classes+=Class*
		public Assignment getClassesAssignment_5() { return cClassesAssignment_5; }

		//Class
		public RuleCall getClassesClassParserRuleCall_5_0() { return cClassesClassParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNoDescriptionNoDescriptionKeyword_1_0 = (Keyword)cNoDescriptionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cShowsAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassTypeDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassTypeDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cClassTypeDescriptionAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Assignment cAssociationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssociationsAssociationParserRuleCall_6_0 = (RuleCall)cAssociationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	"class" noDescription?="noDescription"? name=ID ("shows as" classTypeDescription=STRING)? "{" attributes+=Attribute*
		//	associations+=Association* "}";
		public ParserRule getRule() { return rule; }

		//"class" noDescription?="noDescription"? name=ID ("shows as" classTypeDescription=STRING)? "{" attributes+=Attribute*
		//associations+=Association* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//noDescription?="noDescription"?
		public Assignment getNoDescriptionAssignment_1() { return cNoDescriptionAssignment_1; }

		//"noDescription"
		public Keyword getNoDescriptionNoDescriptionKeyword_1_0() { return cNoDescriptionNoDescriptionKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("shows as" classTypeDescription=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"shows as"
		public Keyword getShowsAsKeyword_3_0() { return cShowsAsKeyword_3_0; }

		//classTypeDescription=STRING
		public Assignment getClassTypeDescriptionAssignment_3_1() { return cClassTypeDescriptionAssignment_3_1; }

		//STRING
		public RuleCall getClassTypeDescriptionSTRINGTerminalRuleCall_3_1_0() { return cClassTypeDescriptionSTRINGTerminalRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }

		//associations+=Association*
		public Assignment getAssociationsAssignment_6() { return cAssociationsAssignment_6; }

		//Association
		public RuleCall getAssociationsAssociationParserRuleCall_6_0() { return cAssociationsAssociationParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIgnoredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIgnoredIgnoredKeyword_0_0 = (Keyword)cIgnoredAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cShowsAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultAssignment_3_1.eContents().get(0);
		
		//Attribute:
		//	ignored?="ignored"? type=DataType name=STRING ("shows as" default=STRING)?;
		public ParserRule getRule() { return rule; }

		//ignored?="ignored"? type=DataType name=STRING ("shows as" default=STRING)?
		public Group getGroup() { return cGroup; }

		//ignored?="ignored"?
		public Assignment getIgnoredAssignment_0() { return cIgnoredAssignment_0; }

		//"ignored"
		public Keyword getIgnoredIgnoredKeyword_0_0() { return cIgnoredIgnoredKeyword_0_0; }

		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//("shows as" default=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"shows as"
		public Keyword getShowsAsKeyword_3_0() { return cShowsAsKeyword_3_0; }

		//default=STRING
		public Assignment getDefaultAssignment_3_1() { return cDefaultAssignment_3_1; }

		//STRING
		public RuleCall getDefaultSTRINGTerminalRuleCall_3_1_0() { return cDefaultSTRINGTerminalRuleCall_3_1_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTextKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDiagramKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//// Note: not more than 1 Diagram attribute per class
		//DataType:
		//	"bool" | "string" | "int" | "text" | "diagram";
		public ParserRule getRule() { return rule; }

		//"bool" | "string" | "int" | "text" | "diagram"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"text"
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }

		//"diagram"
		public Keyword getDiagramKeyword_4() { return cDiagramKeyword_4; }
	}

	public class AssociationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssociationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLinkFileNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinkFileNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cLinkFileNameAssignment_2.eContents().get(0);
		
		//AssociationType:
		//	"associationType" name=ID linkFileName=STRING;
		public ParserRule getRule() { return rule; }

		//"associationType" name=ID linkFileName=STRING
		public Group getGroup() { return cGroup; }

		//"associationType"
		public Keyword getAssociationTypeKeyword_0() { return cAssociationTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//linkFileName=STRING
		public Assignment getLinkFileNameAssignment_2() { return cLinkFileNameAssignment_2; }

		//STRING
		public RuleCall getLinkFileNameSTRINGTerminalRuleCall_2_0() { return cLinkFileNameSTRINGTerminalRuleCall_2_0; }
	}

	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssoTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAssoTypeAssociationTypeCrossReference_3_0 = (CrossReference)cAssoTypeAssignment_3.eContents().get(0);
		private final RuleCall cAssoTypeAssociationTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cAssoTypeAssociationTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cModuleTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModuleTypeSTRINGTerminalRuleCall_5_0 = (RuleCall)cModuleTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFullStopKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cClassTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cClassTypeSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cClassTypeAssignment_6_1.eContents().get(0);
		private final Assignment cAssoDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAssoDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cAssoDescriptionAssignment_7.eContents().get(0);
		
		//Association:
		//	"association" name=ID ":" assoType=[AssociationType] "to" moduleType=STRING ("." classType=STRING)?
		//	assoDescription=STRING?;
		public ParserRule getRule() { return rule; }

		//"association" name=ID ":" assoType=[AssociationType] "to" moduleType=STRING ("." classType=STRING)?
		//assoDescription=STRING?
		public Group getGroup() { return cGroup; }

		//"association"
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//assoType=[AssociationType]
		public Assignment getAssoTypeAssignment_3() { return cAssoTypeAssignment_3; }

		//[AssociationType]
		public CrossReference getAssoTypeAssociationTypeCrossReference_3_0() { return cAssoTypeAssociationTypeCrossReference_3_0; }

		//ID
		public RuleCall getAssoTypeAssociationTypeIDTerminalRuleCall_3_0_1() { return cAssoTypeAssociationTypeIDTerminalRuleCall_3_0_1; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//moduleType=STRING
		public Assignment getModuleTypeAssignment_5() { return cModuleTypeAssignment_5; }

		//STRING
		public RuleCall getModuleTypeSTRINGTerminalRuleCall_5_0() { return cModuleTypeSTRINGTerminalRuleCall_5_0; }

		//("." classType=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"."
		public Keyword getFullStopKeyword_6_0() { return cFullStopKeyword_6_0; }

		//classType=STRING
		public Assignment getClassTypeAssignment_6_1() { return cClassTypeAssignment_6_1; }

		//STRING
		public RuleCall getClassTypeSTRINGTerminalRuleCall_6_1_0() { return cClassTypeSTRINGTerminalRuleCall_6_1_0; }

		//assoDescription=STRING?
		public Assignment getAssoDescriptionAssignment_7() { return cAssoDescriptionAssignment_7; }

		//STRING
		public RuleCall getAssoDescriptionSTRINGTerminalRuleCall_7_0() { return cAssoDescriptionSTRINGTerminalRuleCall_7_0; }
	}
	
	
	private ModelElements pModel;
	private FolderElements pFolder;
	private ModuleElements pModule;
	private ClassElements pClass;
	private AttributeElements pAttribute;
	private DataTypeElements pDataType;
	private AssociationTypeElements pAssociationType;
	private AssociationElements pAssociation;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DxlDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.dsl.dxl.DxlDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"model" name=ID "{" folders+=Folder* "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Folder:
	//	"folder" name=ID "{" module+=Module* associationType+=AssociationType* // These are link modules
	//	"}";
	public FolderElements getFolderAccess() {
		return (pFolder != null) ? pFolder : (pFolder = new FolderElements());
	}
	
	public ParserRule getFolderRule() {
		return getFolderAccess().getRule();
	}

	//Module:
	//	"module" ignoreInReport?="ignoreInReport"? name=ID "{" //Option to declare a file name: default convention used 'Maps' for map, 'Devices' for 'device'
	//	("fileName" fileName=STRING)? classes+=Class* "}";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Class:
	//	"class" noDescription?="noDescription"? name=ID ("shows as" classTypeDescription=STRING)? "{" attributes+=Attribute*
	//	associations+=Association* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Attribute:
	//	ignored?="ignored"? type=DataType name=STRING ("shows as" default=STRING)?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//// Note: not more than 1 Diagram attribute per class
	//DataType:
	//	"bool" | "string" | "int" | "text" | "diagram";
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//AssociationType:
	//	"associationType" name=ID linkFileName=STRING;
	public AssociationTypeElements getAssociationTypeAccess() {
		return (pAssociationType != null) ? pAssociationType : (pAssociationType = new AssociationTypeElements());
	}
	
	public ParserRule getAssociationTypeRule() {
		return getAssociationTypeAccess().getRule();
	}

	//Association:
	//	"association" name=ID ":" assoType=[AssociationType] "to" moduleType=STRING ("." classType=STRING)?
	//	assoDescription=STRING?;
	public AssociationElements getAssociationAccess() {
		return (pAssociation != null) ? pAssociation : (pAssociation = new AssociationElements());
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
