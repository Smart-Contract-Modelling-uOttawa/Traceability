/**
 * generated by Xtext
 */
package org.xtext.dsl.dxl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.dsl.dxl.config.StaticContentProvider;
import org.xtext.dsl.dxl.dxlDsl.Association;
import org.xtext.dsl.dxl.dxlDsl.AssociationType;
import org.xtext.dsl.dxl.dxlDsl.Attribute;
import org.xtext.dsl.dxl.dxlDsl.Folder;
import org.xtext.dsl.dxl.dxlDsl.Module;
import org.xtext.dsl.dxl.util.GeneratorHelper;
import org.xtext.dsl.dxl.util.GlobalVariableHelper;
import org.xtext.dsl.dxl.util.ImportFileHelper;
import org.xtext.dsl.dxl.util.InitExitHelper;
import org.xtext.dsl.dxl.util.ReportHelper;
import org.xtext.dsl.dxl.util.StringUtil;
import org.xtext.dsl.dxl.util.UtilitiesHelper;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class DxlDslGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    UtilitiesHelper.initialize();
    String globalVarContentDynamic = "";
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Folder> _filter = Iterables.<Folder>filter(_iterable, Folder.class);
    for (final Folder f : _filter) {
      String _createDynamicContent = GlobalVariableHelper.createDynamicContent(f);
      String _plus = (globalVarContentDynamic + _createDynamicContent);
      globalVarContentDynamic = _plus;
    }
    String globalVarContentStatic = StaticContentProvider.getContentFromStaticFile("GlobalStatic.dxl");
    String globalVarContent = (globalVarContentStatic + globalVarContentDynamic);
    String globalFileName = UtilitiesHelper.GLOBAL_FILE_NAME;
    String globalFile = (UtilitiesHelper.OUTPUT_LOCATION + globalFileName);
    fsa.generateFile(globalFile, globalVarContent);
    UtilitiesHelper.addFileToList(globalFileName);
    String moduleUtilitiesFileName = UtilitiesHelper.MODULEUTILITIES_FILE_NAME;
    String moduleUtilitiesFile = (UtilitiesHelper.OUTPUT_LOCATION + moduleUtilitiesFileName);
    String moduleUtilitiesFileContent = StaticContentProvider.getContentFromStaticFile("ModuleUtilitiesStatic.dxl");
    fsa.generateFile(moduleUtilitiesFile, moduleUtilitiesFileContent);
    UtilitiesHelper.addFileToList(moduleUtilitiesFileName);
    String initExitFileContent = "";
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<Folder> _filter_1 = Iterables.<Folder>filter(_iterable_1, Folder.class);
    for (final Folder f_1 : _filter_1) {
      String _initExitFileContent = InitExitHelper.getInitExitFileContent(f_1);
      String _plus_1 = (initExitFileContent + _initExitFileContent);
      initExitFileContent = _plus_1;
    }
    String initExitFileName = UtilitiesHelper.INITEXIT_FILE_NAME;
    String initExitFile = (UtilitiesHelper.OUTPUT_LOCATION + initExitFileName);
    fsa.generateFile(initExitFile, initExitFileContent);
    UtilitiesHelper.addFileToList(initExitFileName);
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Module> _filter_2 = Iterables.<Module>filter(_iterable_2, Module.class);
    for (final Module m : _filter_2) {
      {
        String fileName = UtilitiesHelper.getLibFileNameForModule(m);
        String file = (UtilitiesHelper.OUTPUT_LOCATION + fileName);
        CharSequence _compile = this.compile(m);
        fsa.generateFile(file, _compile);
        UtilitiesHelper.addFileToList(fileName);
      }
    }
    String reportContentFolders = "";
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<Folder> _filter_3 = Iterables.<Folder>filter(_iterable_3, Folder.class);
    for (final Folder f_2 : _filter_3) {
      String _createContentForFolder = ReportHelper.createContentForFolder(f_2);
      String _plus_2 = (reportContentFolders + _createContentForFolder);
      reportContentFolders = _plus_2;
    }
    String _createDynamicContentForReprot = ReportHelper.createDynamicContentForReprot(reportContentFolders);
    reportContentFolders = _createDynamicContentForReprot;
    String content = StaticContentProvider.getContentFromStaticFile("ReportStatic.dxl");
    String _plus_3 = (content + reportContentFolders);
    content = _plus_3;
    String reportFileName = UtilitiesHelper.REPORT_FILE_NAME;
    String reportFile = (UtilitiesHelper.OUTPUT_LOCATION + reportFileName);
    fsa.generateFile(reportFile, content);
    UtilitiesHelper.addFileToList(reportFileName);
    String linkContent = "";
    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
    Iterable<Module> _filter_4 = Iterables.<Module>filter(_iterable_4, Module.class);
    for (final Module m_1 : _filter_4) {
      boolean _isModuleContainAssociation = GeneratorHelper.isModuleContainAssociation(m_1);
      if (_isModuleContainAssociation) {
        CharSequence _generateLinks = this.generateLinks(m_1);
        String _plus_4 = (linkContent + _generateLinks);
        linkContent = _plus_4;
      }
    }
    String linkFileName = UtilitiesHelper.LINK_FILE_NAME;
    String linkFile = (UtilitiesHelper.OUTPUT_LOCATION + linkFileName);
    fsa.generateFile(linkFile, linkContent);
    UtilitiesHelper.addFileToList(linkFileName);
    String importFileContent = "";
    TreeIterator<EObject> _allContents_5 = resource.getAllContents();
    Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(_allContents_5);
    Iterable<Folder> _filter_5 = Iterables.<Folder>filter(_iterable_5, Folder.class);
    for (final Folder f_3 : _filter_5) {
      String _importFileContent = ImportFileHelper.getImportFileContent(f_3);
      String _plus_5 = (importFileContent + _importFileContent);
      importFileContent = _plus_5;
    }
    String importFileName = UtilitiesHelper.IMPORT_FILE_NAME;
    String importFile = (UtilitiesHelper.OUTPUT_LOCATION + importFileName);
    fsa.generateFile(importFile, importFileContent);
    UtilitiesHelper.addFileToList(importFileName);
    String utilityFileName = UtilitiesHelper.UTILITY_FILE_NAME;
    String utilityFile = (UtilitiesHelper.OUTPUT_LOCATION + utilityFileName);
    String utilityFilecontent = UtilitiesHelper.getUtilityFileContents();
    fsa.generateFile(utilityFile, utilityFilecontent);
  }
  
  public CharSequence compile(final Module m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************** ");
    _builder.newLine();
    _builder.append("// Author Anisur Rahman, Feb 2012");
    _builder.newLine();
    _builder.append("// - Automated DXL generation Based on earlier version by Gunter Mussbacher");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*************************************************************************************** ");
    _builder.newLine();
    _builder.append("// Author Anisur Rahman, Feb 2012");
    _builder.newLine();
    _builder.append("// - imports ");
    String _name = m.getName();
    _builder.append(_name, "");
    _builder.append(" (updates object if it exists otherwise creates new one)");
    _builder.newLineIfNotEmpty();
    _builder.append("// - always returns true");
    _builder.newLine();
    _builder.append("// - assumptions for this function");
    _builder.newLine();
    _builder.append("//\t- ");
    String _name_1 = m.getName();
    _builder.append(_name_1, "");
    _builder.append("Module exists and is ready to be used");
    _builder.newLineIfNotEmpty();
    _builder.append("*/ ");
    _builder.newLine();
    {
      EList<org.xtext.dsl.dxl.dxlDsl.Class> _classes = m.getClasses();
      for(final org.xtext.dsl.dxl.dxlDsl.Class c : _classes) {
        _builder.newLine();
        String _createFileVariableForImage = GeneratorHelper.createFileVariableForImage(m, c);
        _builder.append(_createFileVariableForImage, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("bool ");
        String _name_2 = c.getName();
        _builder.append(_name_2, "");
        _builder.append("(");
        String _argumentListForAttributes = GeneratorHelper.getArgumentListForAttributes(m, c);
        _builder.append(_argumentListForAttributes, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("{\t \t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("Object foundObject");
        String _declareLastVariableForImage = GeneratorHelper.declareLastVariableForImage(m, c);
        _builder.append(_declareLastVariableForImage, "	");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        String _declareLocalVariableForIntAttribute = GeneratorHelper.declareLocalVariableForIntAttribute(m, c);
        _builder.append(_declareLocalVariableForIntAttribute, "	");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("foundObject = findObject( ");
        String _name_3 = c.getName();
        String _firstLower = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower, "	");
        _builder.append("ID, ");
        String _name_4 = m.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_4);
        _builder.append(_firstLower_1, "	");
        _builder.append("Module )\t ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("if ( null foundObject ) {");
        _builder.newLine();
        _builder.append("\t\t");
        String _defaultforObjectNotFound = GeneratorHelper.getDefaultforObjectNotFound(m, c);
        _builder.append(_defaultforObjectNotFound, "		");
        _builder.append(" \t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("foundObject.\"ID\" = ");
        String _name_5 = c.getName();
        String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
        _builder.append(_firstLower_2, "		");
        _builder.append("ID\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _strForSetNameForObjectNotFound = GeneratorHelper.getStrForSetNameForObjectNotFound(m, c);
        _builder.append(_strForSetNameForObjectNotFound, "		");
        _builder.append("\t\t");
        _builder.newLineIfNotEmpty();
        {
          boolean _isNoDescription = c.isNoDescription();
          boolean _not = (!_isNoDescription);
          if (_not) {
            _builder.append("\t\t");
            _builder.append("foundObject.\"Description_\" = ");
            String _name_6 = c.getName();
            String _firstLower_3 = StringExtensions.toFirstLower(_name_6);
            _builder.append(_firstLower_3, "		");
            _builder.append("Description ");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<Attribute> _attributes = c.getAttributes();
          for(final Attribute f : _attributes) {
            _builder.append("\t \t");
            _builder.append("foundObject.\"");
            String _xifexpression = null;
            String _default = f.getDefault();
            boolean _equals = Objects.equal(_default, null);
            if (_equals) {
              String _name_7 = f.getName();
              _xifexpression = _name_7;
            } else {
              String _default_1 = f.getDefault();
              _xifexpression = _default_1;
            }
            _builder.append(_xifexpression, "	 	");
            _builder.append("\" =  ");
            String _name_8 = c.getName();
            String _firstLower_4 = StringExtensions.toFirstLower(_name_8);
            String _name_9 = f.getName();
            String _firstUpper = StringExtensions.toFirstUpper(_name_9);
            String _varName = StringUtil.getVarName(_firstUpper);
            String _plus = (_firstLower_4 + _varName);
            _builder.append(_plus, "	 	");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t \t");
        _builder.append("foundObject.\"New\" = true");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("foundObject.\"Deleted\" = false");
        _builder.newLine();
        _builder.append("\t ");
        _builder.append("} else {\t\t \t\t \t");
        _builder.newLine();
        _builder.append("\t \t");
        String _strForSetNameForObjectFound = GeneratorHelper.getStrForSetNameForObjectFound(m, c);
        _builder.append(_strForSetNameForObjectFound, "	 	");
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
        {
          boolean _isNoDescription_1 = c.isNoDescription();
          boolean _not_1 = (!_isNoDescription_1);
          if (_not_1) {
            _builder.append("\t \t");
            _builder.append("if( foundObject.\"Description_\" \"\" != ");
            String _name_10 = c.getName();
            String _firstLower_5 = StringExtensions.toFirstLower(_name_10);
            _builder.append(_firstLower_5, "	 	");
            _builder.append("Description )");
            _builder.newLineIfNotEmpty();
            _builder.append("\t \t");
            _builder.append("\t");
            _builder.append("foundObject.\"Description_\" = ");
            String _name_11 = c.getName();
            String _firstLower_6 = StringExtensions.toFirstLower(_name_11);
            _builder.append(_firstLower_6, "	 		");
            _builder.append("Description   ");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<Attribute> _attributes_1 = c.getAttributes();
          for(final Attribute f_1 : _attributes_1) {
            {
              boolean _isIgnored = f_1.isIgnored();
              boolean _equals_1 = (_isIgnored == false);
              if (_equals_1) {
                {
                  String _type = f_1.getType();
                  boolean _equals_2 = Objects.equal(_type, "int");
                  if (_equals_2) {
                    _builder.append("\t\t");
                    _builder.append("i = foundObject.\"");
                    String _xifexpression_1 = null;
                    String _default_2 = f_1.getDefault();
                    boolean _equals_3 = Objects.equal(_default_2, null);
                    if (_equals_3) {
                      String _name_12 = f_1.getName();
                      _xifexpression_1 = _name_12;
                    } else {
                      String _default_3 = f_1.getDefault();
                      _xifexpression_1 = _default_3;
                    }
                    _builder.append(_xifexpression_1, "		");
                    _builder.append("\"");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("if( i != ");
                    String _name_13 = c.getName();
                    String _firstLower_7 = StringExtensions.toFirstLower(_name_13);
                    String _name_14 = f_1.getName();
                    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_14);
                    String _varName_1 = StringUtil.getVarName(_firstUpper_1);
                    String _plus_1 = (_firstLower_7 + _varName_1);
                    _builder.append(_plus_1, "		");
                    _builder.append("  ) ");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t\t");
                    _builder.append("if( foundObject.\"");
                    String _xifexpression_2 = null;
                    String _default_4 = f_1.getDefault();
                    boolean _equals_4 = Objects.equal(_default_4, null);
                    if (_equals_4) {
                      String _name_15 = f_1.getName();
                      _xifexpression_2 = _name_15;
                    } else {
                      String _default_5 = f_1.getDefault();
                      _xifexpression_2 = _default_5;
                    }
                    _builder.append(_xifexpression_2, "		");
                    _builder.append("\" \"\" !=  ");
                    String _name_16 = c.getName();
                    String _firstLower_8 = StringExtensions.toFirstLower(_name_16);
                    String _name_17 = f_1.getName();
                    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_17);
                    String _varName_2 = StringUtil.getVarName(_firstUpper_2);
                    String _plus_2 = (_firstLower_8 + _varName_2);
                    _builder.append(_plus_2, "		");
                    _builder.append("  ) ");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("foundObject.\"");
                String _xifexpression_3 = null;
                String _default_6 = f_1.getDefault();
                boolean _equals_5 = Objects.equal(_default_6, null);
                if (_equals_5) {
                  String _name_18 = f_1.getName();
                  _xifexpression_3 = _name_18;
                } else {
                  String _default_7 = f_1.getDefault();
                  _xifexpression_3 = _default_7;
                }
                _builder.append(_xifexpression_3, "			");
                _builder.append("\" = ");
                String _name_19 = c.getName();
                String _firstLower_9 = StringExtensions.toFirstLower(_name_19);
                String _name_20 = f_1.getName();
                String _firstUpper_3 = StringExtensions.toFirstUpper(_name_20);
                String _varName_3 = StringUtil.getVarName(_firstUpper_3);
                String _plus_3 = (_firstLower_9 + _varName_3);
                _builder.append(_plus_3, "			");
                _builder.append("\t \t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t ");
        String _insertImageStrForObjectFound = GeneratorHelper.getInsertImageStrForObjectFound(m, c);
        _builder.append(_insertImageStrForObjectFound, "		 ");
        _builder.append(" \t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("foundObject.\"Deleted\" = false");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        String _setDefaultObjectForImage = GeneratorHelper.getSetDefaultObjectForImage(m, c);
        _builder.append(_setDefaultObjectForImage, "	");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("debug(\"imported ");
        String _name_21 = c.getName();
        _builder.append(_name_21, "	");
        _builder.append(" \" foundObject.\"ID\" \"\\n\",3)");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return true");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("} ");
        _builder.newLine();
        _builder.newLine();
      }
    }
    _builder.append(" ");
    return _builder;
  }
  
  public CharSequence generateLinks(final Module m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************** ");
    _builder.newLine();
    _builder.append("// Author Anisur Rahman Feb 2012");
    _builder.newLine();
    _builder.append("// Automated DXL generation Based on earlier version by Jean-François Roy, Gunter Mussbacher, Bo Jiang");
    _builder.newLine();
    _builder.append("// - creates links within the ");
    String _name = m.getName();
    _builder.append(_name, "");
    _builder.append(" module and from the ");
    String _name_1 = m.getName();
    _builder.append(_name_1, "");
    _builder.append(" module to the definition modules");
    _builder.newLineIfNotEmpty();
    _builder.append("// - always returns true");
    _builder.newLine();
    _builder.append("// - assumptions for this function");
    _builder.newLine();
    _builder.append("// - The other modules to create link with already exist and are ready to be used");
    _builder.newLine();
    _builder.append("// - referencesLinkModule, refinesLinkModule, boundToLinkModule exist and are ready to be used");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool create");
    String _name_2 = m.getName();
    _builder.append(_name_2, "");
    _builder.append("Links() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Object currentObject, targetObject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string s, p");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int i, j");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("bool b");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for currentObject in ");
    String _name_3 = m.getName();
    _builder.append(_name_3, "	");
    _builder.append("Module do {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// skip over deleted objects which could not be removed because of links");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b = currentObject.\"Deleted\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if( !b ) {");
    _builder.newLine();
    {
      EList<org.xtext.dsl.dxl.dxlDsl.Class> _classes = m.getClasses();
      for(final org.xtext.dsl.dxl.dxlDsl.Class c : _classes) {
        {
          boolean _isClassContainAssociation = GeneratorHelper.isClassContainAssociation(c);
          if (_isClassContainAssociation) {
            {
              EList<Association> _associations = c.getAssociations();
              for(final Association a : _associations) {
                _builder.append("\t\t\t");
                _builder.append("if( currentObject.\"ObjectType_\" \"\" == \"");
                String _name_4 = c.getName();
                _builder.append(_name_4, "			");
                _builder.append("\" ) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("// create link between ");
                String _name_5 = c.getName();
                _builder.append(_name_5, "				");
                _builder.append(" and ");
                {
                  boolean _and = false;
                  String _classType = a.getClassType();
                  boolean _notEquals = (!Objects.equal(_classType, null));
                  if (!_notEquals) {
                    _and = false;
                  } else {
                    String _classType_1 = a.getClassType();
                    int _length = _classType_1.length();
                    boolean _greaterThan = (_length > 0);
                    _and = (_notEquals && _greaterThan);
                  }
                  if (_and) {
                    String _classType_2 = a.getClassType();
                    _builder.append(_classType_2, "				");
                    _builder.append(" in ");
                  }
                }
                String _moduleType = a.getModuleType();
                _builder.append(_moduleType, "				");
                _builder.append(" module");
                _builder.newLineIfNotEmpty();
                {
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  boolean _and_3 = false;
                  String _classType_3 = a.getClassType();
                  boolean _notEquals_1 = (!Objects.equal(_classType_3, null));
                  if (!_notEquals_1) {
                    _and_3 = false;
                  } else {
                    String _classType_4 = a.getClassType();
                    int _length_1 = _classType_4.length();
                    boolean _greaterThan_1 = (_length_1 > 0);
                    _and_3 = (_notEquals_1 && _greaterThan_1);
                  }
                  if (!_and_3) {
                    _and_2 = false;
                  } else {
                    String _classType_5 = a.getClassType();
                    String _name_6 = m.getName();
                    boolean _equalsIgnoreCase = _classType_5.equalsIgnoreCase(_name_6);
                    _and_2 = (_and_3 && _equalsIgnoreCase);
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    String _classType_6 = a.getClassType();
                    String _moduleType_1 = a.getModuleType();
                    boolean _equalsIgnoreCase_1 = _classType_6.equalsIgnoreCase(_moduleType_1);
                    _and_1 = (_and_2 && _equalsIgnoreCase_1);
                  }
                  if (_and_1) {
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("targetObject = parent( currentObject )");
                    _builder.newLine();
                  } else {
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("targetObject = findObject( currentObject.\"");
                    String _assoDescription = a.getAssoDescription();
                    _builder.append(_assoDescription, "				");
                    _builder.append("\" \"\", ");
                    String _moduleType_2 = a.getModuleType();
                    _builder.append(_moduleType_2, "				");
                    _builder.append("Module )");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t\t");
                _builder.append("\t\t\t\t");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("if ( !( null targetObject ) )");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("\t\t");
                _builder.append("currentObject->");
                AssociationType _assoType = a.getAssoType();
                String _linkFileVariable = GeneratorHelper.getLinkFileVariable(_assoType);
                _builder.append(_linkFileVariable, "					");
                _builder.append("->targetObject");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("debug(\"created ");
    String _name_7 = m.getName();
    _builder.append(_name_7, "	");
    _builder.append(" links\\n\", 3)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return true");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
}
