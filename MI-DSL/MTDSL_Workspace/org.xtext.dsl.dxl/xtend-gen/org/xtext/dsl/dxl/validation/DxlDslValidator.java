/**
 * generated by Xtext
 */
package org.xtext.dsl.dxl.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.xtext.dsl.dxl.dxlDsl.Association;
import org.xtext.dsl.dxl.dxlDsl.DxlDslPackage.Literals;
import org.xtext.dsl.dxl.dxlDsl.Folder;
import org.xtext.dsl.dxl.dxlDsl.Module;
import org.xtext.dsl.dxl.validation.AbstractDxlDslValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class DxlDslValidator extends AbstractDxlDslValidator {
  @Check
  public void checkAssociation(final Association association) {
    boolean moduleFound = false;
    boolean classFound = false;
    String moduleName = association.getModuleType();
    String className = association.getClassType();
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(className, null));
    if (!_notEquals) {
      _and = false;
    } else {
      int _length = className.length();
      boolean _greaterThan = (_length > 0);
      _and = (_notEquals && _greaterThan);
    }
    boolean haveClass = _and;
    EObject _eContainer = association.eContainer();
    EObject _eContainer_1 = ((org.xtext.dsl.dxl.dxlDsl.Class) _eContainer).eContainer();
    EObject _eContainer_2 = ((Module) _eContainer_1).eContainer();
    Folder f = ((Folder) _eContainer_2);
    EList<Module> _module = f.getModule();
    for (final Module m : _module) {
      {
        String _name = m.getName();
        boolean _equals = _name.equals(moduleName);
        if (_equals) {
          moduleFound = true;
          if (haveClass) {
            EList<org.xtext.dsl.dxl.dxlDsl.Class> _classes = m.getClasses();
            for (final org.xtext.dsl.dxl.dxlDsl.Class c : _classes) {
              String _name_1 = c.getName();
              boolean _equals_1 = _name_1.equals(className);
              if (_equals_1) {
                classFound = true;
              }
            }
          }
        }
        if (classFound) {
        }
      }
    }
    boolean _not = (!moduleFound);
    if (_not) {
      this.error("Module not found!", Literals.ASSOCIATION__MODULE_TYPE);
    } else {
      boolean _and_1 = false;
      if (!haveClass) {
        _and_1 = false;
      } else {
        boolean _not_1 = (!classFound);
        _and_1 = (haveClass && _not_1);
      }
      if (_and_1) {
        this.error("Class not found in Module!", Literals.ASSOCIATION__CLASS_TYPE);
      }
    }
  }
}
