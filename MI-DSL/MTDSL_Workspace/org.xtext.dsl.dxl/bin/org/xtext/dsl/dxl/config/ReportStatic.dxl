/*************************************************************************************** 
// Author Gunter Mussbacher, May-Aug2005
// - generates a change report for UCM objects with suspect links
*/

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - prepares DOORS for the generation of the change report
//	- makes sure the program is started from a UCM module
//	- makes sure that the selected folder has not been chosen by accident (sets global variable UCMFolder)
//	- opens all external modules for editing/reading (sets global variables
//	  externalModule, externalLinkModule)
//	- makes sure that all modules are closed
//	- opens all formal modules for editing (sets global variables deviceModule, componentModule, 
//	  responsibilityModule, mapModule, scenarioModule)
// - halts if an error occurs or the user chooses "Quit", otherwise returns true
*/
bool beginGenerateChangeReport() {
	int initOK = 1
	string buttons1[] = { "Report", "Quit" }, buttons3[] = { "Ok" } 

	// make sure the the program was started from a UCM module in the correct folder
	checkStartedFromModule( "Report Changes" )
	initOK = messageBox( "Do you want to report changes in external modules\nwhich impact the URN modules in folder \"" name( current Folder ) "\"?\n", buttons1, msgWarning )
	if( initOK == 1 )
		halt
	UCMFolder = current Folder
	debug("correct folder for change report\n", 3)

	// open external module for reading and external link module for editing
	//******External Module is not Supported now ************
	//if( !( openExternalModules() ) ) {
	//	messageBox( "One or both external modules (\"" fileNameExternal "\", \"" fileNameLinkUCMExt "\") could not be opened for reading or editing.\nReport Change cannot proceed.\n", buttons3, msgError )
	//	halt
	//}
	debug("opened external modules for reading/editing\n", 3)

	// make sure all formal and link UCM modules are closed
	if( !( saveCloseAllModules( UCMFolder ) ) ) {
		messageBox( "The URN folder still contains one or more open modules.\nReport Change cannot proceed.\nPlease close all open modules and start the import again.", buttons3, msgError )
		halt
	}
	debug("all modules closed\n", 3)

	// open all UCM modules for editing
	//******External Module is not Supported now ************
	//if( !( openUCMModules() ) ) {
	//	messageBox( "One or more URN modules could not be opened for editing.\nReport Change cannot proceed.\n", buttons3, msgError )
	//	halt
	//}
	debug("opened all URN modules for editing\n", 3)

	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - saves and closes all files
// - always returns true
*/
bool endGenerateChangeReport() {
	string buttons[] = { "Ok" } 

	if( !( saveCloseFinal() ) ) {
		messageBox( "Report Change has finished.\n\nOne or more of the modules in the URN folder or the external modules are still open.\nPlease manually save and close all open formal and link modules.", buttons, msgWarning)
		halt
	}
	debug("saved and closed\n", 3)
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Aug2005
// - finds the last date the given link was cleared
// - if linkDirection equals "IN", only the backwards direction of the link is considered
// - if linkDirection equals "OUT", only the forwards direction of the link is considered
// - returns the last date the link was cleared or "1 Jan 1970" if link was never cleared
*/
Date findClearDate( Link myLink, string linkDirection ) {
	Date dateCleared = "1 Jan 1970"
//	Date d

//	if( linkDirection == "IN" )
	//	d = myLink.S_ATTR_SUSPICION_CLEARED_BACKWARDS
//	if( linkDirection == "OUT" )
//		d = myLink.S_ATTR_SUSPICION_CLEARED_FORWARDS
//	if( !( null d ) ) {
//		dateCleared = d
//		debug("date cleared: " dateCleared "\n", 3)
//	}
	return dateCleared
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - compiles the changes from a given cutoffDate using the history of a given object
// - only changes of type modifyObject are compiled
// - returns changes or "" if there are no changes (note that rich text is used for changes)
*/
string compileChanges( Date cutoffDate, Object myObject ) {
	History currentHistory
	string changes = "", oldVersion, newVersion

	for currentHistory in myObject do {
		if( currentHistory.type == modifyObject && cutoffDate <= currentHistory.date ) {
			oldVersion = currentHistory.oldValue
			newVersion = currentHistory.newValue
			changes = changes "on " currentHistory.date " for attribute '" currentHistory.attrName "'\n" oldVersion "\n--->\n" newVersion "\n\n"
		}
	}
	return changes
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Aug2005
// - generates change report for UCM objects in myModule with suspect links by compiling change information and 
//   assigning it to the "Suspect In Links" and "Suspect Out Links" attributes
// - assumptions for this function
//	- all external modules with links to myModule are open (otherwise suspect links will not be detected)
//	- internal links do not cause suspect links for UCM objects because UCM modules are not supposed to be changed by a DOORS user
// - always returns true
*/
bool generateModuleChangeReport( Module myModule ) {
	Object currentObject, targetObject, sourceObject
	Link currentLink
	Date cutoffDate
	string changes = "", allChanges = ""
	int numberOutLinks = 0
	int numberInLinks = 0

	current = myModule
	load view( "Standard view" )
	for currentObject in myModule do {
		// skips need to be created and deleted each time, otherwise loop with skip does not work correctly
		Skip suspectOutLinks = create
		Skip suspectInLinks = create
		numberOutLinks = fnDetermineSuspectOutLinks( currentObject, suspectOutLinks )
		numberInLinks = fnDetermineSuspectInLinks( currentObject, suspectInLinks )
		if( numberOutLinks > 0 ) {
			for currentLink in suspectOutLinks do {
				targetObject = target currentLink
				// find date suspicion was cleared for link to targetObject from currentObject
				cutoffDate = findClearDate( currentLink, "OUT" )
				// compile history data from target object after cutoffDate
				changes = "Object " targetObject."Absolute Number" " in '" fullName( module( targetObject ) ) "' changed.\n"
				changes = changes compileChanges( cutoffDate, targetObject )
				allChanges = allChanges changes
				debug("compiled changes for " currentObject."ID" " (" targetObject."Absolute Number" " in " fullName( module( targetObject ) ) ")\n", 3)
			}
		}
		if( allChanges == "" )
			allChanges = "No content"
		currentObject."Suspect Out Links" = richText allChanges
		allChanges = ""
		if( numberInLinks > 0 ) {
			for currentLink in suspectInLinks do {
				sourceObject = source currentLink
				// find date suspicion was cleared for link from sourceObject to currentObject
				cutoffDate = findClearDate( currentLink, "IN" )
				// compile history data from source object after cutoffDate
				changes = "Object " sourceObject."Absolute Number" " in '" fullName( module( sourceObject ) ) "' changed.\n"
				changes = changes compileChanges( cutoffDate, sourceObject )
				allChanges = allChanges changes
				debug("compiled changes for " currentObject."ID" " (" sourceObject."Absolute Number" " in " fullName( module( sourceObject ) ) ")\n", 3)
			}
		}
		if( allChanges == "" )
			allChanges = "No content"
		currentObject."Suspect In Links" = richText allChanges
		allChanges = ""
		// skips need to be created and deleted each time, otherwise loop with skip does not work correctly
		delete suspectOutLinks
		delete suspectInLinks
	}
	debug("reported change\n", 3)
	return true
}

