/*************************************************************************************** 
// Author Anisur Rahman, Feb 2012
// - Automated DXL generation Based on earlier version by Gunter Mussbacher
*/

/*************************************************************************************** 
// Author Anisur Rahman, Feb 2012
// - imports blocklink (updates object if it exists otherwise creates new one)
// - always returns true
// - assumptions for this function
//	- blocklinkModule exists and is ready to be used
*/ 


bool blocklink(string blocklinkID, string blocklinkName, string blocklinkDescription, string blocklinkSourceID, 
	string blocklinkDestinationID)
{	 	
	Object foundObject 
	
	foundObject = findObject( blocklinkID, blocklinkModule )	 
	if ( null foundObject ) {
		foundObject = createNewObject(blocklinkModule ) 
		foundObject."ID" = blocklinkID		
		foundObject."Object Heading" = blocklinkName
		foundObject."Name_" = blocklinkName
		foundObject."ObjectType_" = "blocklink"		
		foundObject."Description_" = blocklinkDescription 
	 	foundObject."Source ID" =  blocklinkSourceID
	 	foundObject."Destination ID" =  blocklinkDestinationID
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	if( foundObject."Name_" "" != blocklinkName ) {
	 		 foundObject."Object Heading" = blocklinkName
	 		 foundObject."Name_" = blocklinkName 
	 	}	
	 	if( foundObject."Description_" "" != blocklinkDescription )
	 		foundObject."Description_" = blocklinkDescription   
		if( foundObject."Source ID" "" !=  blocklinkSourceID  ) 
			foundObject."Source ID" = blocklinkSourceID	 	
		if( foundObject."Destination ID" "" !=  blocklinkDestinationID  ) 
			foundObject."Destination ID" = blocklinkDestinationID	 	
		foundObject."Deleted" = false
	}
	
	debug("imported blocklink " foundObject."ID" "\n",3)
	return true
	
} 



bool blockparts(string blockpartsID, string blockpartsName, string blockpartsDescription, string blockpartsSourceID, 
	string blockpartsDestinationID)
{	 	
	Object foundObject 
	
	foundObject = findObject( blockpartsID, blocklinkModule )	 
	if ( null foundObject ) {
		foundObject = createNewObject(blocklinkModule ) 
		foundObject."ID" = blockpartsID		
		foundObject."Object Heading" = blockpartsName
		foundObject."Name_" = blockpartsName
		foundObject."ObjectType_" = "blockparts"		
		foundObject."Description_" = blockpartsDescription 
	 	foundObject."Source ID" =  blockpartsSourceID
	 	foundObject."Destination ID" =  blockpartsDestinationID
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	if( foundObject."Name_" "" != blockpartsName ) {
	 		 foundObject."Object Heading" = blockpartsName
	 		 foundObject."Name_" = blockpartsName 
	 	}	
	 	if( foundObject."Description_" "" != blockpartsDescription )
	 		foundObject."Description_" = blockpartsDescription   
		if( foundObject."Source ID" "" !=  blockpartsSourceID  ) 
			foundObject."Source ID" = blockpartsSourceID	 	
		if( foundObject."Destination ID" "" !=  blockpartsDestinationID  ) 
			foundObject."Destination ID" = blockpartsDestinationID	 	
		foundObject."Deleted" = false
	}
	
	debug("imported blockparts " foundObject."ID" "\n",3)
	return true
	
} 



bool blockToDiagram(string blockToDiagramID, string blockToDiagramName, string blockToDiagramDescription, string blockToDiagramSourceID, 
	string blockToDiagramDestinationID)
{	 	
	Object foundObject 
	
	foundObject = findObject( blockToDiagramID, blocklinkModule )	 
	if ( null foundObject ) {
		foundObject = createNewObject(blocklinkModule ) 
		foundObject."ID" = blockToDiagramID		
		foundObject."Object Heading" = blockToDiagramName
		foundObject."Name_" = blockToDiagramName
		foundObject."ObjectType_" = "blockToDiagram"		
		foundObject."Description_" = blockToDiagramDescription 
	 	foundObject."Source ID" =  blockToDiagramSourceID
	 	foundObject."Destination ID" =  blockToDiagramDestinationID
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	if( foundObject."Name_" "" != blockToDiagramName ) {
	 		 foundObject."Object Heading" = blockToDiagramName
	 		 foundObject."Name_" = blockToDiagramName 
	 	}	
	 	if( foundObject."Description_" "" != blockToDiagramDescription )
	 		foundObject."Description_" = blockToDiagramDescription   
		if( foundObject."Source ID" "" !=  blockToDiagramSourceID  ) 
			foundObject."Source ID" = blockToDiagramSourceID	 	
		if( foundObject."Destination ID" "" !=  blockToDiagramDestinationID  ) 
			foundObject."Destination ID" = blockToDiagramDestinationID	 	
		foundObject."Deleted" = false
	}
	
	debug("imported blockToDiagram " foundObject."ID" "\n",3)
	return true
	
} 



bool Blockparent(string blockparentID, string blockparentName, string blockparentDescription, string blockparentSourceID, 
	string blockparentDestinationID)
{	 	
	Object foundObject 
	
	foundObject = findObject( blockparentID, blocklinkModule )	 
	if ( null foundObject ) {
		foundObject = createNewObject(blocklinkModule ) 
		foundObject."ID" = blockparentID		
		foundObject."Object Heading" = blockparentName
		foundObject."Name_" = blockparentName
		foundObject."ObjectType_" = "Blockparent"		
		foundObject."Description_" = blockparentDescription 
	 	foundObject."Source ID" =  blockparentSourceID
	 	foundObject."Destination ID" =  blockparentDestinationID
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	if( foundObject."Name_" "" != blockparentName ) {
	 		 foundObject."Object Heading" = blockparentName
	 		 foundObject."Name_" = blockparentName 
	 	}	
	 	if( foundObject."Description_" "" != blockparentDescription )
	 		foundObject."Description_" = blockparentDescription   
		if( foundObject."Source ID" "" !=  blockparentSourceID  ) 
			foundObject."Source ID" = blockparentSourceID	 	
		if( foundObject."Destination ID" "" !=  blockparentDestinationID  ) 
			foundObject."Destination ID" = blockparentDestinationID	 	
		foundObject."Deleted" = false
	}
	
	debug("imported Blockparent " foundObject."ID" "\n",3)
	return true
	
} 



bool Blockaggregation(string blockaggregationID, string blockaggregationName, string blockaggregationDescription, string blockaggregationSourceID, 
	string blockaggregationDestinationID)
{	 	
	Object foundObject 
	
	foundObject = findObject( blockaggregationID, blocklinkModule )	 
	if ( null foundObject ) {
		foundObject = createNewObject(blocklinkModule ) 
		foundObject."ID" = blockaggregationID		
		foundObject."Object Heading" = blockaggregationName
		foundObject."Name_" = blockaggregationName
		foundObject."ObjectType_" = "Blockaggregation"		
		foundObject."Description_" = blockaggregationDescription 
	 	foundObject."Source ID" =  blockaggregationSourceID
	 	foundObject."Destination ID" =  blockaggregationDestinationID
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	if( foundObject."Name_" "" != blockaggregationName ) {
	 		 foundObject."Object Heading" = blockaggregationName
	 		 foundObject."Name_" = blockaggregationName 
	 	}	
	 	if( foundObject."Description_" "" != blockaggregationDescription )
	 		foundObject."Description_" = blockaggregationDescription   
		if( foundObject."Source ID" "" !=  blockaggregationSourceID  ) 
			foundObject."Source ID" = blockaggregationSourceID	 	
		if( foundObject."Destination ID" "" !=  blockaggregationDestinationID  ) 
			foundObject."Destination ID" = blockaggregationDestinationID	 	
		foundObject."Deleted" = false
	}
	
	debug("imported Blockaggregation " foundObject."ID" "\n",3)
	return true
	
} 



bool BlockDependency(string blockDependencyID, string blockDependencyName, string blockDependencyDescription, string blockDependencySourceID, 
	string blockDependencyDestinationID)
{	 	
	Object foundObject 
	
	foundObject = findObject( blockDependencyID, blocklinkModule )	 
	if ( null foundObject ) {
		foundObject = createNewObject(blocklinkModule ) 
		foundObject."ID" = blockDependencyID		
		foundObject."Object Heading" = blockDependencyName
		foundObject."Name_" = blockDependencyName
		foundObject."ObjectType_" = "BlockDependency"		
		foundObject."Description_" = blockDependencyDescription 
	 	foundObject."Source ID" =  blockDependencySourceID
	 	foundObject."Destination ID" =  blockDependencyDestinationID
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	if( foundObject."Name_" "" != blockDependencyName ) {
	 		 foundObject."Object Heading" = blockDependencyName
	 		 foundObject."Name_" = blockDependencyName 
	 	}	
	 	if( foundObject."Description_" "" != blockDependencyDescription )
	 		foundObject."Description_" = blockDependencyDescription   
		if( foundObject."Source ID" "" !=  blockDependencySourceID  ) 
			foundObject."Source ID" = blockDependencySourceID	 	
		if( foundObject."Destination ID" "" !=  blockDependencyDestinationID  ) 
			foundObject."Destination ID" = blockDependencyDestinationID	 	
		foundObject."Deleted" = false
	}
	
	debug("imported BlockDependency " foundObject."ID" "\n",3)
	return true
	
} 

