/*************************************************************************************** 
//Author Anisur Rahman 2012, generated version
// based on original version by Author Gunter Mussbacher, May-Jun2005
// - Based on initial version by Bo Jiang
// - provides services for a module
*/

//Global variable for the debug_level
//From 0 (no debug) to 5 (complete debug)
int debug_level = 5

/***************************************************************************************
// Author Jean-François Roy, March 2006
// - Print the debug string if the debug level is less of equal to the global debug_level
*/
void debug( string description, int level ) {
	if (level <= debug_level){
		print ("debug: " description)
	}
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - finds the object with a given ID in the given module
// - returns found object or null if not found
*/
Object findObject( string ID, Module theModule ) {
	Object currentObject, foundObject = null

	for currentObject in theModule do {
		if ( currentObject."ID" "" == ID ) {
			foundObject = currentObject
			break
		}
	}
	return foundObject
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - finds the given object's ancestor with the given ancestorID
// - returns ancestor object or null if not found
*/
Object findAncestor( string ancestorID, Object theObject ) {
	Object ancestorObject = null

	if ( theObject."ID" "" == ancestorID )
		ancestorObject = theObject
	else
		ancestorObject = findAncestor( ancestorID, parent( theObject ) )
	return ancestorObject
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - finds the given object's ancestor of the given type
// - returns ancestor object  or null if not found
*/
Object findAncestorOfType( string ancestorType, Object theObject ) {
	Object ancestorObject = null

	if ( theObject."Type" "" == ancestorType )
		ancestorObject = theObject
	else
		ancestorObject = findAncestorOfType( ancestorType, parent( theObject ) )
	return ancestorObject
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - creates a new object at the end of the given module
// - returns new object
*/
Object createNewObject( Module theModule ) {
	Object currentObject

	current = theModule
	currentObject = last theModule
	if( currentObject == null )
		currentObject = create theModule
	else {
		currentObject = create currentObject
	}
	return currentObject
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - removes the given object if it is possible to remove all children of given object
// - it is not possible to remove an objects with incoming (or optionally outgoing) links
// - always returns true
*/
bool removeDeleted( Object theObject ) {
	Object childObject
	Link l
	string buttons[] = { "No", "No to all", "Yes", "Yes to all" }
	string name
	bool markedDeleted, incomingLinks = false, outgoingLinks = false, wasDeleted = false

	for childObject in theObject do {
		removeDeleted( childObject )
	}
	markedDeleted = theObject."Deleted" 
	// only a leaf object can be deleted
	if( leaf( theObject ) ) {
		// only delete the object if Deleted is set to true
		if( markedDeleted ) {
			// need to use this for loop in order to detect incoming links of opened AND closed modules
			for name in theObject<-"*" do {
				incomingLinks = true
				break
			}
			// only objects without incoming links can be deleted (do not have access to source module to delete objects with incoming links)
			if( !incomingLinks ) {
				// removeDeletedMethod is set to "delete all objects with outgoing links"
				if( removeDeletedMethod == 3 ) {
					softDelete theObject
					wasDeleted = true
				}
				else {
					for l in theObject->"*" do {
						outgoingLinks = true
						break
					}
					// only ask if the object has outgoing links
					if( outgoingLinks ) {
						// only ask if removeDeletedMethod is not set to "do no delete any objects with outgoing links"
						if( removeDeletedMethod != 1 ) {
							removeDeletedMethod = messageBox( "An object with outgoing links needs to be deleted.\n\nDo you want to delete this object even though it has outgoing links?", buttons, msgWarning )
							if( ( removeDeletedMethod == 2 ) || ( removeDeletedMethod == 3 ) ) {
								softDelete theObject
								wasDeleted = true
							}
						}
					}
					else {
						// no need to ask, object does not have links and therefore can be deleted
						softDelete theObject
						wasDeleted = true
					}
				}
			}
		}
	}
	if( markedDeleted && !wasDeleted )
		countDeletedNotRemoved++
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - removes all objects marked deleted in the given module
// - does not remove objects with incoming (or optionally outgoing) links
// - always returns true
*/
bool removeDeletedObjects( Module theModule ) {
	Object currentObject

	// deleted objects must not be shown, otherwise the leaf function used in removeDeleted 
	// could return false even though the children are already soft-deleted
	current theModule
	showDeletedObjects( false )

	for currentObject in top theModule do {
		removeDeleted( currentObject )
	}
	purgeObjects_ theModule
	return true
}
