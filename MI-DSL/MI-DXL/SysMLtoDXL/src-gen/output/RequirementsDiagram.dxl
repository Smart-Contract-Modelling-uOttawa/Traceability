/*************************************************************************************** 
// Author Anisur Rahman, Feb 2012
// - Automated DXL generation Based on earlier version by Gunter Mussbacher
*/

/*************************************************************************************** 
// Author Anisur Rahman, Feb 2012
// - imports requirementsDiagram (updates object if it exists otherwise creates new one)
// - always returns true
// - assumptions for this function
//	- requirementsDiagramModule exists and is ready to be used
*/ 

Object currentRequirementsDiagramObject

bool requirementsDiagram(string requirementsDiagramID, string requirementsDiagramName, string requirementsDiagramDescription, string requirementsDiagramGraphFileName, 
	string requirementsDiagramTitle)
{	 	
	Object foundObject, lastRequirementsDiagramObject 
	
	foundObject = findObject( requirementsDiagramID, requirementsDiagramModule )	 
	if ( null foundObject ) {
		// cannot assume that the current module is  requirementsDiagramModule, needs to be set explicitly
		current = requirementsDiagramModule
		// the picture needs to be inserted first, if another attribute is assigned before
		// that the picture cannot be added anymore
		if( null( last requirementsDiagramModule ) ) 
			insertPictureFileAfter( requirementsDiagramGraphFileName, formatBMP, null )
		else { 
		  lastRequirementsDiagramObject = findAncestorOfType( "requirementsDiagram", last requirementsDiagramModule )
			insertPictureFileAfter( requirementsDiagramGraphFileName, formatBMP, lastRequirementsDiagramObject )
		}
		foundObject = last requirementsDiagramModule
		foundObject."ID" = requirementsDiagramID		
		foundObject."Object Heading" = requirementsDiagramName
		foundObject."Name_" = requirementsDiagramName
		foundObject."ObjectType_" = "requirementsDiagram"		
		foundObject."Description_" = requirementsDiagramDescription 
	 	foundObject."Diagram File Name" =  requirementsDiagramGraphFileName
	 	foundObject."Diagram Title" =  requirementsDiagramTitle
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	if( foundObject."Name_" "" != requirementsDiagramName ) {
	 		 foundObject."Object Heading" = requirementsDiagramName
	 		 foundObject."Name_" = requirementsDiagramName 
	 	}	
	 	if( foundObject."Description_" "" != requirementsDiagramDescription )
	 		foundObject."Description_" = requirementsDiagramDescription   
		if( foundObject."Diagram File Name" "" !=  requirementsDiagramGraphFileName  ) 
			foundObject."Diagram File Name" = requirementsDiagramGraphFileName	 	
		if( foundObject."Diagram Title" "" !=  requirementsDiagramTitle  ) 
			foundObject."Diagram Title" = requirementsDiagramTitle	 	
		 	insertPictureFile( requirementsDiagramGraphFileName, formatBMP, foundObject )
		foundObject."Deleted" = false
	}
	
	currentRequirementsDiagramObject = foundObject 
	debug("imported requirementsDiagram " foundObject."ID" "\n",3)
	return true
	
} 

