/*************************************************************************************** 
// Author Anisur Rahman Feb 2012
// Automated DXL generation Based on earlier version by Jean-François Roy, Gunter Mussbacher, Bo Jiang
// - creates links within the requirementlink module and from the requirementlink module to the definition modules
// - always returns true
// - assumptions for this function
// - The other modules to create link with already exist and are ready to be used
// - referencesLinkModule, refinesLinkModule, boundToLinkModule exist and are ready to be used
*/
	

bool createrequirementlinkLinks() {
	Object currentObject, targetObject
	string s, p
	int i, j
	bool b

	for currentObject in requirementlinkModule do {
		// skip over deleted objects which could not be removed because of links
		b = currentObject."Deleted"
		if( !b ) {
			if( currentObject."ObjectType_" "" == "requirementlink" ) {
				// create link between requirementlink and requirement in requirement module
				targetObject = findObject( currentObject."source ID" "", requirementModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkDerivedFrom->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "requirementlink" ) {
				// create link between requirementlink and requirement in requirement module
				targetObject = findObject( currentObject."destination ID" "", requirementModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkDerivedFrom->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "requirementToBlock" ) {
				// create link between requirementToBlock and requirement in requirement module
				targetObject = findObject( currentObject."source ID" "", requirementModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkSatisfiedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "requirementToBlock" ) {
				// create link between requirementToBlock and block in block module
				targetObject = findObject( currentObject."destination ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkSatisfiedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "subrequirement" ) {
				// create link between subrequirement and requirement in requirement module
				targetObject = findObject( currentObject."source ID" "", requirementModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkContainedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "subrequirement" ) {
				// create link between subrequirement and requirement in requirement module
				targetObject = findObject( currentObject."destination ID" "", requirementModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkContainedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "requirementToDiagram" ) {
				// create link between requirementToDiagram and requirement in requirement module
				targetObject = findObject( currentObject."source ID" "", requirementModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkContainedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "requirementToDiagram" ) {
				// create link between requirementToDiagram and requirementsDiagram in requirementsDiagram module
				targetObject = findObject( currentObject."destination ID" "", requirementsDiagramModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkContainedBy->targetObject
			}
			
		}
	}
	debug("created requirementlink links\n", 3)
	return true
}
	
/*************************************************************************************** 
// Author Anisur Rahman Feb 2012
// Automated DXL generation Based on earlier version by Jean-François Roy, Gunter Mussbacher, Bo Jiang
// - creates links within the blocklink module and from the blocklink module to the definition modules
// - always returns true
// - assumptions for this function
// - The other modules to create link with already exist and are ready to be used
// - referencesLinkModule, refinesLinkModule, boundToLinkModule exist and are ready to be used
*/
	

bool createblocklinkLinks() {
	Object currentObject, targetObject
	string s, p
	int i, j
	bool b

	for currentObject in blocklinkModule do {
		// skip over deleted objects which could not be removed because of links
		b = currentObject."Deleted"
		if( !b ) {
			if( currentObject."ObjectType_" "" == "blocklink" ) {
				// create link between blocklink and block in block module
				targetObject = findObject( currentObject."source ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkRefersTo->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "blocklink" ) {
				// create link between blocklink and block in block module
				targetObject = findObject( currentObject."destination ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkRefersTo->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "blockparts" ) {
				// create link between blockparts and block in block module
				targetObject = findObject( currentObject."source ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkPartOf->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "blockparts" ) {
				// create link between blockparts and block in block module
				targetObject = findObject( currentObject."destination ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkPartOf->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "blockToDiagram" ) {
				// create link between blockToDiagram and block in block module
				targetObject = findObject( currentObject."source ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkContainedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "blockToDiagram" ) {
				// create link between blockToDiagram and blockDefinitionDiagram in blockDefinitionDiagram module
				targetObject = findObject( currentObject."destination ID" "", blockDefinitionDiagramModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkContainedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "Blockparent" ) {
				// create link between Blockparent and block in block module
				targetObject = findObject( currentObject."source ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkChildOf->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "Blockparent" ) {
				// create link between Blockparent and block in block module
				targetObject = findObject( currentObject."destination ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkChildOf->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "Blockaggregation" ) {
				// create link between Blockaggregation and block in block module
				targetObject = findObject( currentObject."source ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkIsSharedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "Blockaggregation" ) {
				// create link between Blockaggregation and block in block module
				targetObject = findObject( currentObject."destination ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkIsSharedBy->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "BlockDependency" ) {
				// create link between BlockDependency and block in block module
				targetObject = findObject( currentObject."source ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkDependency->targetObject
			}
			
			if( currentObject."ObjectType_" "" == "BlockDependency" ) {
				// create link between BlockDependency and block in block module
				targetObject = findObject( currentObject."destination ID" "", blockModule )
							
				if ( !( null targetObject ) )
					currentObject->fileNameLinkDependency->targetObject
			}
			
		}
	}
	debug("created blocklink links\n", 3)
	return true
}
	
