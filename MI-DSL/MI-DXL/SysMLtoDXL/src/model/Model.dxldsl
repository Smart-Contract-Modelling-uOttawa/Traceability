model myModel{
	//TODO ::TO Remove the support of using the name of ID for each links used inside the class
	//     :: OR Make it optional - probably suggested; need to talk to Daniel
	
	//TODO:: Type ONLY needed for classes with Links. Verify if it is working correctly now. 
	//        (probably a utility method to get the type for the class)
	
	folder MyFolder{ 
		
		
		module responsibility{
			//deafult name , id, description			
			class responsibility{					
				string "processorDemand" shows as  "Processor Demand"																	
			}			
		}	
		
		module ignoreInReport actor{
			class actor{}
		}	
		
	 
		module ignoreInReport intentionalElement{
			fileName "Intentional Elements"
			
			class intentionalElement{	
				string "type"
				string "decompositionType"	shows as "Decomposition Type"		
			}			
		}
		
			 
		module map{				
			class map{		
				diagram "graphFileName"	shows as "Map File Name"	
				string "title" shows as	"Map Title"								
			}	
			
			class respRef{
				int "Fx" 
				int "Fy"
				string "enclosingComponent" shows as "Enclosing Component"
				string "referenceID" shows as "Definition ID"				
				association respID1 : references	to "responsibility"	 "Definition ID"	
				association respID2 : boundto	to "map"."compRef"	 "Enclosing Component"	
				association respID3 : refines	to "map"."map"	
			}
					
			class noDescription compRef{
				int "Fx"
				int "Fy"
				int "Width"
				int "Height"
				string "Anchored"				
				string "referenceComponent" shows as "Definition ID"
				string "role" shows as "Component Role"
				string "parentComponent" shows as "Parent Component"				
				association compID1 : references	to "component"	 "Definition ID"
				//To Verify
				association compID2 : boundto	to "map"."compRef"  "Parent Component"
				association compID3 : refines	to "map"."map"				
			}
			
			class noDescription stub{
				int "Fx" 
				int "Fy"								
				string "stubType" shows as "Stub Type"
				string "submapID" shows as "Plugins"					
				//Association compID : ComponentRef	to "component"."component"	
				association stubID1 : refines to "map"."map"				
			}					
		}
		
		/*
		 * need to have support in DsL to assign default value, and withoud including in the parameter list
		 * See: generated code for belief, IntentioanalElementRef (example: (attribute) Type)
		 * ** True 
		 */
		module ignoreInReport grlDiagram{	
				fileName "GRL Diagrams"	
							
			class grldiagram shows as "grl diagram"{		
				diagram "graphFileName"	shows as"Diagram File Name"	
				string "title" shows as	"Diagram Title"		
				
			}	
			
			  /*
			   * This class is needed here for the associate actorRef2
			   * Need to review to have a better way
			   */
			class parentActor{				
			}
			
			class noDescription actorRef{
				int "Fx"
				int "Fy"
				int "Width"
				int "Height"							
				string "referenceActor" shows as "Definition ID"				
				string "parentActor" shows as "Parent Actor"				
				
				//association actorRef1 : references	to "actor" "Definition ID"
				association actorRef1 : references	to "actor"."actor" "Definition ID"
				
				// we don't need have the ".parentActor" portion here to generate the code; it is 
				//     to generate the comment; as "Parent Actor" portion is used in the code.
				//TODO:: To verify with Daniel what should be the actual class here, and if we can
				//     use an existing class name here to use in the comment; 
				//     Otherwise we need to remove the validation of an existing class; as due to this 
				//     validation, I needed to create a "parentActor" class in grlDiagramModule; which 
				//     is not used anywhere else       
				association actorRef2 : boundto	to "grlDiagram"."parentActor"  "Parent Actor"
				association actorRef3 : refines	to "grlDiagram"."grldiagram" 				
			}
			
			class intentionalElementRef{
				int "Fx" 
				int "Fy"
				string "enclosingActor" shows as "Enclosing Actor"
				string "defID" shows as "Definition ID"
				string "priority" shows as "Priority"
				string "criticality" shows as "Criticality"				
				//Association intentionalElementID : intentionalElementRef	to "intentionalElement"."intentionalElement"	
				association ieAsso1 : references	to "intentionalElement"."intentionalElement" "Definition ID"
				association ieAsso2 : boundto	to "grlDiagram"."actorRef" "Enclosing Actor"
				association ieAsso3 : refines	to "grlDiagram"."grldiagram" 
							
			}
			
			class belief{
				int "Fx" 
				int "Fy"	
				string "enclosingActor" shows as "Enclosing Actor"							
				string "linkedElementId" shows as "Intentional Element ID"
				string "author" shows as "Author"					
				//Association compID : ComponentRef	to "component"."component"	
				association beliefAsso1 : boundto	to "grlDiagram"."actorRef"	 "Enclosing Actor"
				association beliefAsso2 : rationales	to "grlDiagram"."intentionalElementRef"  "Intentional Element ID"
				association beliefAsso3 : refines	to "grlDiagram"."grldiagram" 								
			}							
		}
				
		
		module component{				
			class component{		
				string "Type" shows as "Type"	
				string "hostedDeviceID" shows as "Device ID"	
				
				association compAsso1: hosts to "device"."device" "Device ID"							
			}			
		}		
		
		module device{				
			class device{		
				string "speedFactor" shows as "Speed Factor"												
			}			
		}
		
		
		/*
		 * To geneareate the class element link & contribution.
		 * In classic URN library, this was under elementlink file
		 * Note: no class called intentialelElementAssociation; just a module as per classic URN lib
		 */
		
		//module intentionalElementAssociations{
		/*
		 * Renaming the module intentionalElementAssociations to elementlink
		 */
		module elementlink{
			fileName "Intentional Element Associations"
			
			class elementlink{				
				string "Type"
				string "sourceID" shows as "Source ID"
				string "destinationID" shows as "Destination ID"
				
				association elemlinkAsso1 : refines to  "intentionalElement"."intentionalElement" "source ID"
				// TODO: existing code my be worng for the above link; as started with link opposite
				//      Toverify if bug in existing code, or this is an special case. If a special case then
				//     	DSL might need to be updated to indicate this specal case
				
				association elemlinkAsso2 : refines to  "intentionalElement"."intentionalElement" "destination ID"
			}
			
			 class contribution{
				string "Type" 
			    string "contributionType" shows as "Contribution Type"
				string "Correlation"
				string "sourceID" shows as "Source ID"
				string "destinationID" shows as "Destination ID"	
				
				association contributionAsso1 : refines to  "intentionalElement"."intentionalElement" "source ID"
				// TODO: existing code my be worng for the above link; as started with link opposite
				//      Toverify if bug in existing code, or this is an special case. If a special case then
				//     	DSL might need to be updated to indicate this specal case
				association contributionAsso2 : refines to  "intentionalElement"."intentionalElement" "destination ID"			
			}			
		}
		
		module strategy{
			class strategy{
				string "Author"				
			}
		}		
		
		//global fileNameLinkDevComp = "Hosts"
		associationType hosts "Hosts"
		
		//global fileNameLinkDevResp = "Requests"
		associationType requests "Requests"
		
		//global fileNameLinkRefDef = "References"		
	
		associationType references "References"	
		
		//global fileNameLinkMapElem = "Refines" 
		associationType refines "Refines"
		
		//global fileNameLinkMapScen = "Traced By"
		associationType tracedBy "Traced By"
		
		//global fileNameLinkMapComp = "Bound To" 
		associationType boundto "Bound To"
		
		//global fileNameLinkBeliefElem = "Rationales" 
		associationType rationales "Rationales"
		
		//global fileNameLinkUrnLink = "Urn Links"
		associationType urnLinks "Urn Links"
		
		//global test = "test3366777656768"
		
		//externalFile "../Use Cases" "Common"
		
		//externalLinkFile "../Satisfies" "Generated"
		
		//global fileNameDevices = "Devices"
		//global fileNameComponents = "Components"
		//global fileNameResponsibilities = "Responsibilities"
		//global fileNameMaps = "Maps"
		//global fileNameScenarios = "Scenarios"
		//global fileNameGrlDiagrams = "GRL Diagrams"
		//global fileNameActors = "Actors"
		//global fileNameIntentionalElements = "Intentional Elements"
		//global fileNameIntentionalElementAssociations = "Intentional Element Associations"
		//global fileNameStrategy = "Strategies"
		
		//global attributeExternalLink = "Generated"
		//global attributeExternalModule = "Common"
		
		// global constants (relative to URN folder)
		//global fileNameExternal = "../Use Cases"
		//global fileNameLinkUCMExt = "../Satisfies"
		
		   	 
	}	
}



	







