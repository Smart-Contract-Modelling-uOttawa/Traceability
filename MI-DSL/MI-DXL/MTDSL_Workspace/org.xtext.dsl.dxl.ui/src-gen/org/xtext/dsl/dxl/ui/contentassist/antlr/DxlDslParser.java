/*
* generated by Xtext
*/
package org.xtext.dsl.dxl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.dsl.dxl.services.DxlDslGrammarAccess;

public class DxlDslParser extends AbstractContentAssistParser {
	
	@Inject
	private DxlDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.dsl.dxl.ui.contentassist.antlr.internal.InternalDxlDslParser createParser() {
		org.xtext.dsl.dxl.ui.contentassist.antlr.internal.InternalDxlDslParser result = new org.xtext.dsl.dxl.ui.contentassist.antlr.internal.InternalDxlDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getFolderAccess().getGroup(), "rule__Folder__Group__0");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_4(), "rule__Module__Group_4__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_3(), "rule__Attribute__Group_3__0");
					put(grammarAccess.getAssociationTypeAccess().getGroup(), "rule__AssociationType__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup_6(), "rule__Association__Group_6__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getFoldersAssignment_3(), "rule__Model__FoldersAssignment_3");
					put(grammarAccess.getFolderAccess().getNameAssignment_1(), "rule__Folder__NameAssignment_1");
					put(grammarAccess.getFolderAccess().getModuleAssignment_3(), "rule__Folder__ModuleAssignment_3");
					put(grammarAccess.getFolderAccess().getAssociationTypeAssignment_4(), "rule__Folder__AssociationTypeAssignment_4");
					put(grammarAccess.getModuleAccess().getIgnoreInReportAssignment_1(), "rule__Module__IgnoreInReportAssignment_1");
					put(grammarAccess.getModuleAccess().getNameAssignment_2(), "rule__Module__NameAssignment_2");
					put(grammarAccess.getModuleAccess().getFileNameAssignment_4_1(), "rule__Module__FileNameAssignment_4_1");
					put(grammarAccess.getModuleAccess().getClassesAssignment_5(), "rule__Module__ClassesAssignment_5");
					put(grammarAccess.getClassAccess().getNoDescriptionAssignment_1(), "rule__Class__NoDescriptionAssignment_1");
					put(grammarAccess.getClassAccess().getNameAssignment_2(), "rule__Class__NameAssignment_2");
					put(grammarAccess.getClassAccess().getClassTypeDescriptionAssignment_3_1(), "rule__Class__ClassTypeDescriptionAssignment_3_1");
					put(grammarAccess.getClassAccess().getAttributesAssignment_5(), "rule__Class__AttributesAssignment_5");
					put(grammarAccess.getClassAccess().getAssociationsAssignment_6(), "rule__Class__AssociationsAssignment_6");
					put(grammarAccess.getAttributeAccess().getIgnoredAssignment_0(), "rule__Attribute__IgnoredAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_1(), "rule__Attribute__TypeAssignment_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
					put(grammarAccess.getAttributeAccess().getDefaultAssignment_3_1(), "rule__Attribute__DefaultAssignment_3_1");
					put(grammarAccess.getAssociationTypeAccess().getNameAssignment_1(), "rule__AssociationType__NameAssignment_1");
					put(grammarAccess.getAssociationTypeAccess().getLinkFileNameAssignment_2(), "rule__AssociationType__LinkFileNameAssignment_2");
					put(grammarAccess.getAssociationAccess().getNameAssignment_1(), "rule__Association__NameAssignment_1");
					put(grammarAccess.getAssociationAccess().getAssoTypeAssignment_3(), "rule__Association__AssoTypeAssignment_3");
					put(grammarAccess.getAssociationAccess().getModuleTypeAssignment_5(), "rule__Association__ModuleTypeAssignment_5");
					put(grammarAccess.getAssociationAccess().getClassTypeAssignment_6_1(), "rule__Association__ClassTypeAssignment_6_1");
					put(grammarAccess.getAssociationAccess().getAssoDescriptionAssignment_7(), "rule__Association__AssoDescriptionAssignment_7");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.dsl.dxl.ui.contentassist.antlr.internal.InternalDxlDslParser typedParser = (org.xtext.dsl.dxl.ui.contentassist.antlr.internal.InternalDxlDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DxlDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DxlDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
