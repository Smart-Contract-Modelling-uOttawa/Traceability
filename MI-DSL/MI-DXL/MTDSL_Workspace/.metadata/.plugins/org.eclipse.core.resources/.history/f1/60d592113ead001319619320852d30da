/**
 * generated by Xtext
 */
package org.xtext.dsl.dxl.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.xtext.dsl.dxl.dxlDsl.Association;
import org.xtext.dsl.dxl.dxlDsl.AssociationType;
import org.xtext.dsl.dxl.dxlDsl.Module;
import org.xtext.dsl.dxl.util.GeneratorHelper;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class DxlDslGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    throw new Error("Unresolved compilation problems:"
      + "\nImportFileHelper cannot be resolved to a type."
      + "\ngetImportFileContent cannot be resolved");
  }
  
  public CharSequence compile(final Module m) {
    throw new Error("Unresolved compilation problems:"
      + "\nStringUtil cannot be resolved to a type."
      + "\nStringUtil cannot be resolved to a type."
      + "\nStringUtil cannot be resolved to a type."
      + "\nStringUtil cannot be resolved to a type."
      + "\ngetVarName cannot be resolved"
      + "\ngetVarName cannot be resolved"
      + "\ngetVarName cannot be resolved"
      + "\ngetVarName cannot be resolved");
  }
  
  public CharSequence generateLinks(final Module m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************** ");
    _builder.newLine();
    _builder.append("// Author Anisur Rahman Feb 2012");
    _builder.newLine();
    _builder.append("// Automated DXL generation Based on earlier version by Jean-Fran√ßois Roy, Gunter Mussbacher, Bo Jiang");
    _builder.newLine();
    _builder.append("// - creates links within the ");
    String _name = m.getName();
    _builder.append(_name, "");
    _builder.append(" module and from the ");
    String _name_1 = m.getName();
    _builder.append(_name_1, "");
    _builder.append(" module to the definition modules");
    _builder.newLineIfNotEmpty();
    _builder.append("// - always returns true");
    _builder.newLine();
    _builder.append("// - assumptions for this function");
    _builder.newLine();
    _builder.append("// - The other modules to create link with already exist and are ready to be used");
    _builder.newLine();
    _builder.append("// - referencesLinkModule, refinesLinkModule, boundToLinkModule exist and are ready to be used");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool create");
    String _name_2 = m.getName();
    _builder.append(_name_2, "");
    _builder.append("Links() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Object currentObject, targetObject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string s, p");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int i, j");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("bool b");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for currentObject in ");
    String _name_3 = m.getName();
    _builder.append(_name_3, "	");
    _builder.append("Module do {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// skip over deleted objects which could not be removed because of links");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b = currentObject.\"Deleted\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if( !b ) {");
    _builder.newLine();
    {
      EList<org.xtext.dsl.dxl.dxlDsl.Class> _classes = m.getClasses();
      for(final org.xtext.dsl.dxl.dxlDsl.Class c : _classes) {
        {
          boolean _isClassContainAssociation = GeneratorHelper.isClassContainAssociation(c);
          if (_isClassContainAssociation) {
            {
              EList<Association> _associations = c.getAssociations();
              for(final Association a : _associations) {
                _builder.append("\t\t\t");
                _builder.append("if( currentObject.\"ObjectType_\" \"\" == \"");
                String _name_4 = c.getName();
                _builder.append(_name_4, "			");
                _builder.append("\" ) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("// create link between ");
                String _name_5 = c.getName();
                _builder.append(_name_5, "				");
                _builder.append(" and ");
                {
                  boolean _and = false;
                  String _classType = a.getClassType();
                  boolean _notEquals = (!Objects.equal(_classType, null));
                  if (!_notEquals) {
                    _and = false;
                  } else {
                    String _classType_1 = a.getClassType();
                    int _length = _classType_1.length();
                    boolean _greaterThan = (_length > 0);
                    _and = (_notEquals && _greaterThan);
                  }
                  if (_and) {
                    String _classType_2 = a.getClassType();
                    _builder.append(_classType_2, "				");
                    _builder.append(" in ");
                  }
                }
                String _moduleType = a.getModuleType();
                _builder.append(_moduleType, "				");
                _builder.append(" module");
                _builder.newLineIfNotEmpty();
                {
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  boolean _and_3 = false;
                  String _classType_3 = a.getClassType();
                  boolean _notEquals_1 = (!Objects.equal(_classType_3, null));
                  if (!_notEquals_1) {
                    _and_3 = false;
                  } else {
                    String _classType_4 = a.getClassType();
                    int _length_1 = _classType_4.length();
                    boolean _greaterThan_1 = (_length_1 > 0);
                    _and_3 = (_notEquals_1 && _greaterThan_1);
                  }
                  if (!_and_3) {
                    _and_2 = false;
                  } else {
                    String _classType_5 = a.getClassType();
                    String _name_6 = m.getName();
                    boolean _equalsIgnoreCase = _classType_5.equalsIgnoreCase(_name_6);
                    _and_2 = (_and_3 && _equalsIgnoreCase);
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    String _classType_6 = a.getClassType();
                    String _moduleType_1 = a.getModuleType();
                    boolean _equalsIgnoreCase_1 = _classType_6.equalsIgnoreCase(_moduleType_1);
                    _and_1 = (_and_2 && _equalsIgnoreCase_1);
                  }
                  if (_and_1) {
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("targetObject = parent( currentObject )");
                    _builder.newLine();
                  } else {
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("targetObject = findObject( currentObject.\"");
                    String _assoDescription = a.getAssoDescription();
                    _builder.append(_assoDescription, "				");
                    _builder.append("\" \"\", ");
                    String _moduleType_2 = a.getModuleType();
                    _builder.append(_moduleType_2, "				");
                    _builder.append("Module )");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t\t");
                _builder.append("\t\t\t\t");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("if ( !( null targetObject ) )");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("\t\t");
                _builder.append("currentObject->");
                AssociationType _assoType = a.getAssoType();
                String _linkFileVariable = GeneratorHelper.getLinkFileVariable(_assoType);
                _builder.append(_linkFileVariable, "					");
                _builder.append("->targetObject");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("debug(\"created ");
    String _name_7 = m.getName();
    _builder.append(_name_7, "	");
    _builder.append(" links\\n\", 3)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return true");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
}
