/*
 * generated by Xtext
 */
package org.xtext.dsl.dxl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess


import static extension org.eclipse.xtext.xbase.lib.IteratorExtensions.*


import org.xtext.dsl.dxl.util.*
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.dsl.dxl.config.StaticContentProvider

import org.xtext.dsl.dxl.dxlDsl.Class

import com.google.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DxlDslGenerator implements IGenerator {
	
//	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//	}


	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		//initialization
		UtilitiesHelper::initialize()
		
		
		// global variable 		
		
		var globalVarContentDynamic = ""		
		
		for(f:resource.allContents.toIterable.filter(typeof(org.xtext.dsl.dxl.dxlDsl.Folder))){
		
			globalVarContentDynamic = globalVarContentDynamic + GlobalVariableHelper::createDynamicContent(f)			
		}
	 
		var globalVarContentStatic = StaticContentProvider::getContentFromStaticFile("GlobalStatic.dxl")
		
		var globalVarContent = globalVarContentStatic + globalVarContentDynamic
		var globalFileName = UtilitiesHelper::GLOBAL_FILE_NAME
		var globalFile =  UtilitiesHelper::OUTPUT_LOCATION + globalFileName
		fsa.generateFile( globalFile , globalVarContent )
		UtilitiesHelper::addFileToList(globalFileName);
		
		
		// ModuleUtilities.dxl
		var moduleUtilitiesFileName = UtilitiesHelper::MODULEUTILITIES_FILE_NAME
		var moduleUtilitiesFile =  UtilitiesHelper::OUTPUT_LOCATION + moduleUtilitiesFileName
		var moduleUtilitiesFileContent = StaticContentProvider::getContentFromStaticFile("ModuleUtilitiesStatic.dxl")
		fsa.generateFile( moduleUtilitiesFile , moduleUtilitiesFileContent )
		UtilitiesHelper::addFileToList(moduleUtilitiesFileName);
		
		
		//InitExit.dxl
		var initExitFileContent = ""
		for(f:resource.allContents.toIterable.filter(typeof(org.xtext.dsl.dxl.dxlDsl.Folder))){
			initExitFileContent = initExitFileContent + InitExitHelper::getInitExitFileContent(f)			
		}
		
		var initExitFileName = UtilitiesHelper::INITEXIT_FILE_NAME
		var initExitFile =  UtilitiesHelper::OUTPUT_LOCATION + initExitFileName
		fsa.generateFile( initExitFile , initExitFileContent )
		UtilitiesHelper::addFileToList(initExitFileName);
		
		
		
		//create Module library
		for(m:resource.allContents.toIterable.filter(typeof(org.xtext.dsl.dxl.dxlDsl.Module))){
			
			// working code to generate file in windows file system according to package structure
			//var fileName = "/output/" + e.fullyQualifiedName.toString
			//fsa.generateFile(fileName.replaceAll("\\.", "/") + ".dxl", e.compile)
								
						
			// getting the object name as file name			
			var fileName = UtilitiesHelper::getLibFileNameForModule(m) 			 
			var file =    UtilitiesHelper::OUTPUT_LOCATION + fileName 			
			fsa.generateFile(file , m.compile)
			
			UtilitiesHelper::addFileToList(fileName);							
		}	
		
		
			
		//create report
		
		var reportContentFolders = ""
		for(f:resource.allContents.toIterable.filter(typeof(org.xtext.dsl.dxl.dxlDsl.Folder))){
			reportContentFolders = reportContentFolders + ReportHelper::createContentForFolder(f)
		}
		
		reportContentFolders = ReportHelper::createDynamicContentForReprot(reportContentFolders)

		
		var content = StaticContentProvider::getContentFromStaticFile("ReportStatic.dxl")
		content = content + reportContentFolders
		var reportFileName =  UtilitiesHelper::REPORT_FILE_NAME
		var reportFile =  UtilitiesHelper::OUTPUT_LOCATION + reportFileName
		fsa.generateFile(reportFile , content )
		
		UtilitiesHelper::addFileToList(reportFileName);
		
		//Link
		var linkContent = ""
		
		for(m:resource.allContents.toIterable.filter(typeof(org.xtext.dsl.dxl.dxlDsl.Module))){
			
			if (GeneratorHelper::isModuleContainAssociation(m)){
			
				linkContent = linkContent + m.generateLinks
				
			}		
		}
		
		var linkFileName =  UtilitiesHelper::LINK_FILE_NAME
		var linkFile = UtilitiesHelper::OUTPUT_LOCATION +  linkFileName 
		fsa.generateFile(linkFile , linkContent)
		UtilitiesHelper::addFileToList(linkFileName);
			
		
		
		//import.dxl
		                 
		var importFileContent = ""
		for(f:resource.allContents.toIterable.filter(typeof(org.xtext.dsl.dxl.dxlDsl.Folder))){
			importFileContent = importFileContent + ImportFileHelper::getImportFileContent(f)			
		}
		
		var importFileName = UtilitiesHelper::IMPORT_FILE_NAME
		var importFile =  UtilitiesHelper::OUTPUT_LOCATION + importFileName
		fsa.generateFile( importFile , importFileContent )
		UtilitiesHelper::addFileToList(importFileName);
		
		
				
		// utility file  - having list/import of all other files.
		var utilityFileName= UtilitiesHelper::UTILITY_FILE_NAME
		var utilityFile =  UtilitiesHelper::OUTPUT_LOCATION + utilityFileName
		var utilityFilecontent = UtilitiesHelper::getUtilityFileContents
		fsa.generateFile(utilityFile , utilityFilecontent )		
		
		
	}
	
	
	
	
	
	def compile(org.xtext.dsl.dxl.dxlDsl.Module m)	
	'''
/*************************************************************************************** 
// Author Anisur Rahman, Feb 2012
// - Automated DXL generation Based on earlier version by Gunter Mussbacher
*/

/*************************************************************************************** 
// Author Anisur Rahman, Feb 2012
// - imports «m.name» (updates object if it exists otherwise creates new one)
// - always returns true
// - assumptions for this function
//	- «m.name»Module exists and is ready to be used
*/ 
«FOR c:m.classes»	

«GeneratorHelper::createFileVariableForImage(m,c)»

bool «c.name»(«GeneratorHelper::getArgumentListForAttributes(m,c)»)
{	 	
	Object foundObject«GeneratorHelper::declareLastVariableForImage(m,c)» 
	
	«GeneratorHelper::declareLocalVariableForIntAttribute(m,c)»
	foundObject = findObject( «c.name.toFirstLower»ID, «m.name.toFirstLower»Module )	 
	if ( null foundObject ) {
		«GeneratorHelper::getDefaultforObjectNotFound(m,c)» 		
		foundObject."ID" = «c.name.toFirstLower»ID		
		«GeneratorHelper::getStrForSetNameForObjectNotFound(m,c)»		
		«IF !(c.noDescription)»	
		foundObject."Description_" = «c.name.toFirstLower»Description 
		«ENDIF»
	 	«FOR f:c.attributes»	  
	 	foundObject."«if (f.^default == null) f.name else f.^default »" =  «c.name.toFirstLower +  StringUtil::getVarName(f.name.toFirstUpper) »
      	«ENDFOR»	            
	 	foundObject."New" = true
		foundObject."Deleted" = false
	 } else {		 		 	
	 	«GeneratorHelper::getStrForSetNameForObjectFound(m,c)»	
	 	«IF !(c.noDescription)»	
	 	if( foundObject."Description_" "" != «c.name.toFirstLower»Description )
	 		foundObject."Description_" = «c.name.toFirstLower»Description   
		«ENDIF»	
		«FOR f:c.attributes»	  
		«IF (f.ignored  == false)»
		«IF (f.type  == "int")»
		i = foundObject."«if (f.^default == null) f.name else f.^default »"
		if( i != «c.name.toFirstLower +  StringUtil::getVarName(f.name.toFirstUpper) »  ) 
		«ELSE»
		if( foundObject."«if (f.^default == null) f.name else f.^default »" "" !=  «c.name.toFirstLower +  StringUtil::getVarName(f.name.toFirstUpper) »  ) 
		«ENDIF»		
			foundObject."«if (f.^default == null) f.name else f.^default »" = «c.name.toFirstLower +  StringUtil::getVarName(f.name.toFirstUpper) »	 	
		«ENDIF»		
    	«ENDFOR»
		 «GeneratorHelper::getInsertImageStrForObjectFound(m,c)» 		
		foundObject."Deleted" = false
	}
	
	«GeneratorHelper::getSetDefaultObjectForImage(m,c)»
	debug("imported «c.name» " foundObject."ID" "\n",3)
	return true
	
} 

«ENDFOR» '''




	
	def generateLinks(org.xtext.dsl.dxl.dxlDsl.Module m)	
	'''
/*************************************************************************************** 
// Author Anisur Rahman Feb 2012
// Automated DXL generation Based on earlier version by Jean-François Roy, Gunter Mussbacher, Bo Jiang
// - creates links within the «m.name» module and from the «m.name» module to the definition modules
// - always returns true
// - assumptions for this function
// - The other modules to create link with already exist and are ready to be used
// - referencesLinkModule, refinesLinkModule, boundToLinkModule exist and are ready to be used
*/
	

bool create«m.name»Links() {
	Object currentObject, targetObject
	string s, p
	int i, j
	bool b

	for currentObject in «m.name»Module do {
		// skip over deleted objects which could not be removed because of links
		b = currentObject."Deleted"
		if( !b ) {
			«FOR c:m.classes»
				«IF (GeneratorHelper::isClassContainAssociation(c))»
					«FOR a:c.associations»						
						if( currentObject."ObjectType_" "" == "«c.name»" ) {
							// create link between «c.getName()» and «IF (a.getClassType() != null) && (a.getClassType().length() > 0)»«a.getClassType()» in «ENDIF»«a.moduleType» module
							«IF ((a.getClassType() != null) && (a.getClassType().length() > 0) && (a.getClassType().equalsIgnoreCase(m.name)) && (a.getClassType().equalsIgnoreCase(a.getModuleType()) ) )»
							targetObject = parent( currentObject )
							«ELSE»
							targetObject = findObject( currentObject."«a.assoDescription»" "", «a.moduleType»Module )
							«ENDIF»
										
							if ( !( null targetObject ) )
								currentObject->«GeneratorHelper::getLinkFileVariable(a.assoType)»->targetObject
						}
						
					«ENDFOR»				
				«ENDIF»
			«ENDFOR»			
		}
	}
	debug("created «m.name» links\n", 3)
	return true
}
	
	''' 	



	
	
	
	
	
	
}
